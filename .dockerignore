# Git 관련 파일 제외
.git
.gitignore

# VS Code 설정 제외
.vscode/

# Python 가상 환경 제외
venv/

# Python 캐시 파일 제외
__pycache__/
*.pyc
*.pyo
*.pyd
.Python

# OS 관련 파일 제외
.DS_Store
Thumbs.db

# 환경 변수 파일 제외 (docker-compose에서 주입)
.env

# 데이터베이스 파일 제외 (볼륨으로 관리)
db/*.db
db/*.sqlite3

# Node.js 개발 의존성 제외 (React 빌드는 로컬에서 수행 후 결과만 복사)
node_modules/

# V0 원본 폴더 제외
server-dashboard-final/
```

---

## 2단계: 서버 준비 및 실행

1.  **코드 전송:** 메인컴에서 수정한 모든 파일 (`Dockerfile`, `docker-compose.yml`, `nginx/`, `wsgi.py`, `.dockerignore` 등)을 서버의 `~/cbrtsv` 폴더로 `git push` 및 `git pull` (또는 `scp`) 합니다.
2.  **React 앱 빌드 및 전송:**
    * 메인컴에서 **데스크톱용** React 앱을 빌드 (`npm run build`) 하고, 결과물(`dist` 또는 `build` 폴더 내용)을 서버의 `~/cbrtsv/src/front/desktop` 폴더로 복사합니다.
    * 메인컴에서 **모바일용** React 앱을 빌드하고, 결과물을 서버의 `~/cbrtsv/src/front/mobile` 폴더로 복사합니다.
3.  **데이터베이스 마이그레이션 (필수):** 서버에서 Docker 외부에서 Flask-Migrate 명령을 실행하여 DB를 준비합니다.
    ```bash
    cd ~/cbrtsv
    source venv/bin/activate # 로컬 venv 활성화 (flask 명령어 사용 위함)
    export FLASK_APP=wsgi.py # 또는 export FLASK_APP="src.back:create_app()"
    flask db upgrade # DB 테이블 생성 또는 업데이트
    deactivate # venv 비활성화
    ```
4.  **Certbot용 폴더 생성:** Nginx 설정에서 사용한 Certbot 임시 폴더를 서버에 만듭니다.
    ```bash
    sudo mkdir -p /var/www/certbot
    sudo chown www-data:www-data /var/www/certbot # Nginx/Certbot 이 쓸 수 있도록 권한 부여
    ```
5.  **Docker Compose 실행:** 서버의 `~/cbrtsv` 폴더에서 아래 명령어를 실행합니다.
    ```bash
    # (로그아웃 후 다시 로그인하여 docker 그룹 적용 확인)
    # 이미지 빌드 및 컨테이너 생성/시작 (백그라운드 실행: -d)
    docker compose up --build -d
    ```
6.  **로그 확인 (선택):**
    ```bash
    docker compose logs -f app
    docker compose logs -f nginx
    
