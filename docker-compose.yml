version: '3.8'

services:
  # Flask/Gunicorn 애플리케이션 서비스
  app:
    # 현재 디렉토리의 Dockerfile을 사용하여 이미지를 빌드합니다.
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cbrtsv_flask_app
    # .env 파일에 정의된 환경 변수를 컨테이너 내부로 전달합니다.
    env_file:
      - .env
    # 볼륨을 마운트합니다.
    volumes:
      # Flask 소스 코드 변경 시 Gunicorn이 자동 리로드하도록 마운트 (개발 시 유용)
      # 운영 환경에서는 Dockerfile에서 COPY하는 것이 더 안정적일 수 있습니다.
      - ./src/back:/app/src/back
      - ./config.py:/app/config.py
      - ./wsgi.py:/app/wsgi.py
      # SQLite 데이터베이스 파일이 저장될 폴더를 마운트하여 데이터를 유지합니다.
      - ./db:/app/db
      # Nginx와 통신할 Gunicorn 소켓 파일을 위한 공유 볼륨을 마운트합니다.
      - gunicorn_socket:/app
    # 컨테이너 재시작 정책 (오류 시 자동으로 재시작)
    restart: unless-stopped

  # Nginx 리버스 프록시 서비스
  nginx:
    # nginx 서브디렉토리의 Dockerfile을 사용하여 이미지를 빌드합니다.
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: cbrtsv_nginx
    # 호스트의 80, 443 포트를 컨테이너의 80, 443 포트로 연결(매핑)합니다.
    ports:
      - "80:80"
      - "443:443"
    # 볼륨을 마운트합니다.
    volumes:
      # React 빌드 결과물이 있는 폴더를 Nginx가 정적 파일을 서빙할 경로로 마운트합니다 (읽기 전용).
      - ./src/front:/var/www/frontend:ro
      # Gunicorn 소켓 통신을 위한 공유 볼륨을 마운트합니다.
      - gunicorn_socket:/app
      # Let's Encrypt 인증서 및 관련 파일을 컨테이너 내부로 마운트합니다 (읽기 전용).
      # Certbot이 사용할 임시 폴더도 마운트합니다 (읽기/쓰기).
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/certbot:/var/www/certbot # Certbot HTTP-01 challenge 용
    # app 서비스가 시작된 후에 nginx 서비스가 시작되도록 의존성을 설정합니다.
    depends_on:
      - app
    # 컨테이너 재시작 정책
    restart: unless-stopped

# 명명된 볼륨 정의
volumes:
  # Nginx와 Gunicorn 간 소켓 통신을 위한 볼륨
  gunicorn_socket:
