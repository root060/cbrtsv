    # user www-data; # 필요시 사용자 지정
    worker_processes auto;
    pid /var/run/nginx.pid;
    # include /etc/nginx/modules-enabled/*.conf; # 필요시 모듈 로드

    events {
        worker_connections 768;
        # multi_accept on;
    }

    http {
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        # server_tokens off; # 버전 정보 숨기기 (보안)

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # SSL 설정 (Certbot 설정 파일 포함)
        # ssl_protocols TLSv1.2 TLSv1.3; # options-ssl-nginx.conf 에 포함될 수 있음
        # ssl_prefer_server_ciphers on;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        gzip on;
        # gzip_vary on;
        # gzip_proxied any;
        # gzip_comp_level 6;
        # gzip_buffers 16 8k;
        # gzip_http_version 1.1;
        # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

        # Gunicorn 앱 서버를 가리키는 upstream 정의 (유닉스 소켓 사용)
        upstream flask_app {
            # '/app'은 Flask 컨테이너의 작업 디렉토리
            server unix:/app/gunicorn.sock fail_timeout=0;
        }

        # HTTP (80) -> HTTPS (443) 리디렉션 서버
        server {
            listen 80;
            listen [::]:80;
            server_name cbrtsv.o-r.kr;

            # Certbot 갱신을 위한 경로 허용 (필수)
            location /.well-known/acme-challenge/ {
                root /var/www/certbot; # Certbot 이 사용할 임시 폴더 (docker-compose에서 볼륨 마운트 필요)
            }

            location / {
                return 301 https://$host$request_uri; # 모든 요청을 HTTPS로 리디렉션
            }
        }

        # HTTPS (443) 메인 서버
        server {
            listen 443 ssl http2;
            listen [::]:443 ssl http2;
            server_name cbrtsv.o-r.kr;

            # SSL 인증서 경로 (docker-compose에서 /etc/letsencrypt 볼륨 마운트 필요)
            ssl_certificate /etc/letsencrypt/live/cbrtsv.o-r.kr/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/cbrtsv.o-r.kr/privkey.pem;
            # Certbot 이 생성한 SSL 보안 강화 설정 파일 포함
            include /etc/letsencrypt/options-ssl-nginx.conf;
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

            # User-Agent 확인하여 프론트엔드 루트 경로 설정
            set $frontend_root /var/www/frontend/desktop; # 기본값: 데스크톱
            if ($http_user_agent ~* (Mobile|Android|iPhone|iPad|iPod|BlackBerry|Windows Phone)) {
                set $frontend_root /var/www/frontend/mobile; # 모바일일 경우 경로 변경
            }

            # API, 인증 관련 경로는 Flask 앱으로 전달
            location ~ ^/(api|login|logout) {
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                # proxy_read_timeout 300s; # 긴 요청 처리 시 필요할 수 있음
                proxy_pass http://flask_app; # upstream 이름 사용
            }

            # NAS 경로는 나중에 추가 (File Browser 컨테이너 필요)
            # location /nas/ {
            #     proxy_pass http://<filebrowser_service_name>:8080/;
            #     ...
            # }

            # 그 외 모든 경로는 React 앱 파일 서빙
            location / {
                root $frontend_root; # User-Agent에 따라 결정된 경로 사용
                index index.html;
                try_files $uri $uri/ /index.html; # React Router 지원
            }

            # 보안 헤더 추가 (선택 사항)
            # add_header X-Frame-Options "SAMEORIGIN";
            # add_header X-Content-Type-Options "nosniff";
            # add_header Referrer-Policy "strict-origin-when-cross-origin";
            # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        }
    }
    
